// <auto-generated />
using System;
using GithubCommitsToMusic.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GithubCommitsToMusic.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250129183313_Queries")]
    partial class Queries
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GithubCommitsToMusic.Models.Commit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Commits", (string)null);
                });

            modelBuilder.Entity("GithubCommitsToMusic.Models.Music", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VirtualPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Musics", (string)null);
                });

            modelBuilder.Entity("GithubCommitsToMusic.Models.Query", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Queries", (string)null);
                });

            modelBuilder.Entity("GithubCommitsToMusic.Models.Sheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<string>("VirtualPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sheets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Do.MP3",
                            Note = 0,
                            VirtualPath = "/Sheets/Do.MP3"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Re.MP3",
                            Note = 1,
                            VirtualPath = "/Sheets/Re.MP3"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mi.MP3",
                            Note = 2,
                            VirtualPath = "/Sheets/Mi.MP3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fa.MP3",
                            Note = 3,
                            VirtualPath = "/Sheets/Fa.MP3"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sol.MP3",
                            Note = 4,
                            VirtualPath = "/Sheets/Sol.MP3"
                        },
                        new
                        {
                            Id = 6,
                            Name = "La.MP3",
                            Note = 5,
                            VirtualPath = "/Sheets/La.MP3"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Si.MP3",
                            Note = 6,
                            VirtualPath = "/Sheets/Si.MP3"
                        });
                });

            modelBuilder.Entity("GithubCommitsToMusic.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GithubCommitsToMusic.Models.Commit", b =>
                {
                    b.HasOne("GithubCommitsToMusic.Models.User", "User")
                        .WithMany("Commits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GithubCommitsToMusic.Models.Music", b =>
                {
                    b.HasOne("GithubCommitsToMusic.Models.User", "User")
                        .WithMany("Musics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GithubCommitsToMusic.Models.User", b =>
                {
                    b.Navigation("Commits");

                    b.Navigation("Musics");
                });
#pragma warning restore 612, 618
        }
    }
}
